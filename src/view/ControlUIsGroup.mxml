<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" 
		  width="310"
		  addedToStage="addedToStageHandler(event)"
		  >
	
	<fx:Script>
		<![CDATA[
			
			import message.Message;
			import message.MessageDispatcher;
			
			import model.ImportDataProxy;
			import model.LanguageProxy;
			
			[Bindable]
			private var languageProxy:LanguageProxy = LanguageProxy.getInstance();
			
			private var importDataProxy:ImportDataProxy = ImportDataProxy.getInstance();
			
			[Bindable]
			private var movementName:String = "";
			
			[Bindable]
			private var movementBoneName:String = "";
			
			private var movementUpdated:Boolean;
			
			private function addedToStageHandler(event:Event):void{
				
				updatePlayAndPauseBtn();
				
				sliderDurationTo.addEventListener(Event.CHANGE, valueChangeHandler);
				numDurationTo.addEventListener(Event.CHANGE, valueChangeHandler);
				
				sliderDurationTween.addEventListener(Event.CHANGE, valueChangeHandler);
				numDurationTween.addEventListener(Event.CHANGE, valueChangeHandler);
				
				sliderTweenEasing.addEventListener(Event.CHANGE, valueChangeHandler);
				//numKeyFrameEase.addEventListener(Event.CHANGE, valueChangeHandler);
				
				btnPlay.addEventListener(MouseEvent.CLICK, valueChangeHandler);
				checkLoop.addEventListener(Event.CHANGE, valueChangeHandler);
				
				sliderScale.addEventListener(Event.CHANGE, valueChangeHandler);
				numScale.addEventListener(Event.CHANGE, valueChangeHandler);
				
				sliderDelay.addEventListener(Event.CHANGE, valueChangeHandler);
				numDelay.addEventListener(Event.CHANGE, valueChangeHandler);
				
				MessageDispatcher.addEventListener(MessageDispatcher.LANGUAGE_CHANGE, commandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.CHANGE_MOVEMENT_DATA, commandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.CHANGE_MOVEMENT_BONE_DATA, commandHandler);
				
				MessageDispatcher.addEventListener(MessageDispatcher.MOVEMENT_CHANGE, commandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.MOVEMENT_START, commandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.MOVEMENT_COMPLETE, commandHandler);
				
				MessageDispatcher.addEventListener(MessageDispatcher.UPDATE_MOVEMENT_DATA, commandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.UPDATE_MOVEMENT_BONE_DATA, commandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.UPDATE_BONE_PARENT, commandHandler);
				
			}
			
			private function commandHandler(_e:Message):void{
				switch(_e.type){
					case MessageDispatcher.LANGUAGE_CHANGE:
						updatePlayAndPauseBtn();
						break;
					case MessageDispatcher.CHANGE_MOVEMENT_DATA:
						movementName = _e.parameters[0];
						var _durationTo:int = importDataProxy.animationDataProxy.durationTo;
						var _durationTween:int = importDataProxy.animationDataProxy.durationTween;
						if(_durationTo < 0){
							numDurationTo.enabled = false;
							sliderDurationTo.enabled = false;
						}else{
							numDurationTo.value = _durationTo;
							numDurationTo.enabled = true;
							sliderDurationTo.value = _durationTo;
							sliderDurationTo.enabled = true;
						}
						if(_durationTween < 0){
							numDurationTween.enabled = false;
							sliderDurationTween.enabled = false;
							checkLoop.selected = false;
							checkLoop.enabled = false;
							sliderTweenEasing.enabled = false;
							//numKeyFrameEase.enabled = false;
						}else{
							numDurationTween.value = _durationTween;
							numDurationTween.enabled = true;
							sliderDurationTween.value = _durationTween;
							sliderDurationTween.enabled = true;
							checkLoop.selected = importDataProxy.animationDataProxy.loop;
							checkLoop.enabled = true;
							//numKeyFrameEase.value = sliderTweenEasing.value = importDataProxy.animationDataProxy.tweenEasing;
							sliderTweenEasing.enabled = true;
							//numKeyFrameEase.enabled = true;
						}
						break;
					case MessageDispatcher.CHANGE_MOVEMENT_BONE_DATA:
						movementBoneName = _e.parameters[0];
						var _boneScale:Number = importDataProxy.animationDataProxy.boneScale;
						var _boneDelay:Number = importDataProxy.animationDataProxy.boneDelay;
						
						if(isNaN(_boneScale)){
							numScale.enabled = false;
							sliderScale.enabled = false;
						}else{
							numScale.enabled = true;
							sliderScale.enabled = true;
							numScale.value = _boneScale;
							sliderScale.value = _boneScale;
						}
						
						if(isNaN(_boneDelay)){
							numDelay.enabled = false;
							sliderDelay.enabled = false;
						}else{
							numDelay.enabled = true;
							sliderDelay.enabled = true;
							numDelay.value = _boneDelay;
							sliderDelay.value = _boneDelay;
						}
						
						break;
					case MessageDispatcher.MOVEMENT_CHANGE:
						updatePlayAndPauseBtn();
						break;
					case MessageDispatcher.MOVEMENT_START:
						break;
					case MessageDispatcher.MOVEMENT_COMPLETE:
						updatePlayAndPauseBtn();
						break;
					case MessageDispatcher.UPDATE_MOVEMENT_DATA:
					case MessageDispatcher.UPDATE_MOVEMENT_BONE_DATA:
					case MessageDispatcher.UPDATE_BONE_PARENT:
						movementUpdated = !importDataProxy.armature.animation.isPlaying;
						break;
				}
			}
			
			private function valueChangeHandler(_e:Event):void{
				switch(_e.target){
					case sliderDurationTo:
						numDurationTo.value = sliderDurationTo.value;
					case numDurationTo:
						sliderDurationTo.value = numDurationTo.value;
						importDataProxy.animationDataProxy.durationTo = numDurationTo.value;
						break;
					case sliderDurationTween:
						numDurationTween.value = sliderDurationTween.value;
					case numDurationTween:
						sliderDurationTween.value = numDurationTween.value;
						importDataProxy.animationDataProxy.durationTween = numDurationTween.value;
						break;
					//case numKeyFrameEase:
						//sliderDurationTo.value = numDurationTo.value;
					case sliderTweenEasing:
						if(sliderDurationTo.value < -1){
							//trace(1);
							//numKeyFrameEase.textDisplay.text = "NaN";
						}else{
							//numKeyFrameEase.value = sliderDurationTo.value;
						}
						importDataProxy.animationDataProxy.tweenEasing = sliderTweenEasing.value;
						break;
					case btnPlay:
						//翻转了 selected
						if(importDataProxy.armature){
							if(!btnPlay.selected){
								importDataProxy.armature.animation.stop();
							}else{
								if(movementUpdated){
									importDataProxy.armature.animation.gotoAndPlay(importDataProxy.animationDataProxy.movementName);
								}else{
									importDataProxy.armature.animation.play();
								}
							}
							updatePlayAndPauseBtn();
							movementUpdated = false;
						}
						break;
					case checkLoop:
						importDataProxy.animationDataProxy.loop = checkLoop.selected;
						break;
					case sliderScale:
						numScale.value = sliderScale.value;
					case numScale:
						sliderScale.value = numScale.value;
						importDataProxy.animationDataProxy.boneScale = numScale.value;
						break;
					case sliderDelay:
						numDelay.value = sliderDelay.value;
					case numDelay:
						sliderDelay.value = numDelay.value;
						importDataProxy.animationDataProxy.boneDelay = numDelay.value;
						break;
				}
			}
			
			private function updatePlayAndPauseBtn():void{
				if(importDataProxy.armature){
					btnPlay.enabled = true;
					if(importDataProxy.armature.animation.isPause){
						btnPlay.label = languageProxy.playLabel;
						btnPlay.selected = false;
					}else if(importDataProxy.armature.animation.isComplete){
						btnPlay.label = languageProxy.playLabel;
						btnPlay.selected = false;
					}else{
						btnPlay.label = languageProxy.stopLabel;
						btnPlay.selected = true;
					}
				}else{
					btnPlay.selected = false;
					btnPlay.enabled = false;
					btnPlay.label = languageProxy.playLabel;
				}
			}
		]]>
	</fx:Script>
	<s:VGroup width="100%" height="100%" gap="2">
		<mx:Accordion width="100%" height="155">
			<s:NavigatorContent width="100%" height="100%" label="{languageProxy.movementPanelTitle + movementName}">
				<s:Label x="10" y="10" width="110" height="24" textAlign="right" verticalAlign="middle"
						 text="{languageProxy.movementFrameLabel}"
						 />
				
				<s:Label x="10" y="40" width="110" height="24"  textAlign="right" verticalAlign="middle"
						 text="{languageProxy.tweenFrameLabel}"
						 />

				<s:Label x="10" y="70" width="110" height="24"  textAlign="right" verticalAlign="middle"
						 text="{languageProxy.keyFrameEaseLabel}"
						 />
				
				
				<s:HSlider id="sliderDurationTween" x="130" y="17" width="100"
						   minimum="0" maximum="100" snapInterval="1"
						   />
				<s:HSlider id="sliderDurationTo" x="130" y="47" width="100" 
						   minimum="0" maximum="100" snapInterval="1"
						   />
				<s:CheckBox id="checkLoop" x="130" y="100" width="100" height="24" 
							label="{languageProxy.movementLoopLabel}"
							/>
				<s:HSlider id="sliderTweenEasing" x="130" y="77" width="100"
						   minimum="-1.1" maximum="2" snapInterval="0.05"
						   />
				<s:ToggleButton id="btnPlay" x="48" y="100" width="70" height="24"
						  />
				
				<s:NumericStepper id="numDurationTween" x="240" y="10" width="60" height="24" cornerRadius="0" textAlign="right"
								  maximum="3000" minimum="0" snapInterval="1"
								  />
				
				<s:NumericStepper id="numDurationTo" x="240" y="40" width="60" height="24" cornerRadius="0" textAlign="right"
								  maximum="3000" minimum="0" snapInterval="1"
								  />
			</s:NavigatorContent>
		</mx:Accordion>
		<mx:Accordion width="100%" height="100%">
			<s:NavigatorContent width="100%" height="100%" label="{languageProxy.boneMovementPanelTitle + movementBoneName}">
				<s:Label x="10" y="10" width="110" height="24" textAlign="right" verticalAlign="middle"
						 text="{languageProxy.boneTweenScaleLabel}"
						 />
				<s:Label x="10" y="40" width="110" height="24" textAlign="right" verticalAlign="middle"
						 text="{languageProxy.boneTweenDelayLabel}"
						 />
				<s:HSlider id="sliderScale" x="130" y="17" width="100"
						   minimum="0" maximum="200" snapInterval="5"
						   />
				<s:HSlider id="sliderDelay" x="130" y="47" width="100"
						   minimum="-100" maximum="100" snapInterval="5"
						   />
				<s:NumericStepper id="numScale" x="240" y="10" width="60" height="24" cornerRadius="0" textAlign="right"
								  maximum="1000" minimum="0" snapInterval="1"
								  />
				<s:NumericStepper id="numDelay" x="240" y="40" width="60" height="24" cornerRadius="0" textAlign="right"
								  maximum="100" minimum="-100" snapInterval="1"
								  />
			</s:NavigatorContent>
		</mx:Accordion>
	</s:VGroup>
</s:Group>