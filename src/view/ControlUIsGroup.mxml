<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" 
		  addedToStage="addedToStageHandler(event)"
		  >
	
	<fx:Script>
		<![CDATA[
			import message.Message;
			import message.MessageDispatcher;
			
			import model.ImportDataProxy;
			import model.SettingDataProxy;
			
			private var _importDataProxy:ImportDataProxy = ImportDataProxy.getInstance();
			
			[Bindable]
			private var _movementName:String = "";
			
			[Bindable]
			private var _movementBoneName:String = "";
			
			private var _movementUpdated:Boolean;
			
			private function addedToStageHandler(event:Event):void
			{
				
				updatePlayAndPauseBtn();
				
				sliderDurationTo.addEventListener(Event.CHANGE, valueChangeHandler);
				numDurationTo.addEventListener(Event.CHANGE, valueChangeHandler);
				
				sliderDurationTween.addEventListener(Event.CHANGE, valueChangeHandler);
				numDurationTween.addEventListener(Event.CHANGE, valueChangeHandler);
				
				sliderTweenEasing.addEventListener(Event.CHANGE, valueChangeHandler);
				
				btnPlay.addEventListener(MouseEvent.CLICK, valueChangeHandler);
				checkLoop.addEventListener(Event.CHANGE, valueChangeHandler);
				
				sliderScale.addEventListener(Event.CHANGE, valueChangeHandler);
				numScale.addEventListener(Event.CHANGE, valueChangeHandler);
				
				sliderDelay.addEventListener(Event.CHANGE, valueChangeHandler);
				numDelay.addEventListener(Event.CHANGE, valueChangeHandler);
				
				MessageDispatcher.addEventListener(MessageDispatcher.SETTING_DATA_CHANGE, settingHandler);
				
				MessageDispatcher.addEventListener(MessageDispatcher.CHANGE_MOVEMENT_DATA, commandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.CHANGE_MOVEMENT_BONE_DATA, commandHandler);
				
				MessageDispatcher.addEventListener(MessageDispatcher.MOVEMENT_CHANGE, commandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.MOVEMENT_START, commandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.MOVEMENT_COMPLETE, commandHandler);
				
				MessageDispatcher.addEventListener(MessageDispatcher.UPDATE_MOVEMENT_DATA, commandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.UPDATE_MOVEMENT_BONE_DATA, commandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.UPDATE_BONE_PARENT, commandHandler);
				
			}
			
			private function settingHandler(e:Message):void
			{
				var settingID:String = e.parameters[0];
				var value:Object = e.parameters[1];
				switch(settingID)
				{
					case SettingDataProxy.LANGUAGE_ID:
						updatePlayAndPauseBtn();
						break;
				}
			}
			
			private function commandHandler(e:Message):void
			{
				switch(e.type)
				{
					case MessageDispatcher.CHANGE_MOVEMENT_DATA:
						_movementName = e.parameters[0];
						var durationTo:Number = _importDataProxy.animationDataProxy.durationTo;
						var durationTween:Number = _importDataProxy.animationDataProxy.durationTween;
						if(durationTo < 0)
						{
							numDurationTo.enabled = false;
							sliderDurationTo.enabled = false;
						}
						else
						{
							numDurationTo.value = durationTo;
							numDurationTo.enabled = true;
							sliderDurationTo.value = durationTo;
							sliderDurationTo.enabled = true;
						}
						if(durationTween < 0)
						{
							numDurationTween.enabled = false;
							sliderDurationTween.enabled = false;
							checkLoop.selected = false;
							checkLoop.enabled = false;
							sliderTweenEasing.enabled = false;
						}
						else
						{
							numDurationTween.value = durationTween;
							numDurationTween.enabled = true;
							sliderDurationTween.value = durationTween;
							sliderDurationTween.enabled = true;
							checkLoop.selected = _importDataProxy.animationDataProxy.loop;
							checkLoop.enabled = true;
							sliderTweenEasing.value = _importDataProxy.animationDataProxy.tweenEasing;
							sliderTweenEasing.enabled = true;
						}
						break;
					case MessageDispatcher.CHANGE_MOVEMENT_BONE_DATA:
						_movementBoneName = e.parameters[0];
						var boneScale:Number = _importDataProxy.animationDataProxy.boneScale;
						var boneDelay:Number = _importDataProxy.animationDataProxy.boneDelay;
						
						if(isNaN(boneScale))
						{
							numScale.enabled = false;
							sliderScale.enabled = false;
						}
						else
						{
							numScale.enabled = true;
							sliderScale.enabled = true;
							numScale.value = boneScale;
							sliderScale.value = boneScale;
						}
						
						if(isNaN(boneDelay))
						{
							numDelay.enabled = false;
							sliderDelay.enabled = false;
						}
						else
						{
							numDelay.enabled = true;
							sliderDelay.enabled = true;
							numDelay.value = boneDelay;
							sliderDelay.value = boneDelay;
						}
						break;
					case MessageDispatcher.MOVEMENT_CHANGE:
					case MessageDispatcher.MOVEMENT_START:
					case MessageDispatcher.MOVEMENT_COMPLETE:
						updatePlayAndPauseBtn();
						break;
					case MessageDispatcher.UPDATE_MOVEMENT_DATA:
					case MessageDispatcher.UPDATE_MOVEMENT_BONE_DATA:
					case MessageDispatcher.UPDATE_BONE_PARENT:
						_movementUpdated = !_importDataProxy.armature.animation.isPlaying;
						break;
				}
			}
			
			private function valueChangeHandler(e:Event):void
			{
				switch(e.target){
					case sliderDurationTo:
						_importDataProxy.animationDataProxy.durationTo = sliderDurationTo.value;
						numDurationTo.value = _importDataProxy.animationDataProxy.durationTo;
						sliderDurationTo.value = _importDataProxy.animationDataProxy.durationTo;
						break;
					case numDurationTo:
						_importDataProxy.animationDataProxy.durationTo = numDurationTo.value;
						numDurationTo.value = _importDataProxy.animationDataProxy.durationTo;
						sliderDurationTo.value = _importDataProxy.animationDataProxy.durationTo;
						break;
					case sliderDurationTween:
						_importDataProxy.animationDataProxy.durationTween = sliderDurationTween.value;
						numDurationTween.value = _importDataProxy.animationDataProxy.durationTween;
						sliderDurationTween.value = _importDataProxy.animationDataProxy.durationTween;
						break;
					case numDurationTween:
						_importDataProxy.animationDataProxy.durationTween = numDurationTween.value;
						numDurationTween.value = _importDataProxy.animationDataProxy.durationTween;
						sliderDurationTween.value = _importDataProxy.animationDataProxy.durationTween;
						break;
					case sliderTweenEasing:
						_importDataProxy.animationDataProxy.tweenEasing = sliderTweenEasing.value;
						break;
					case btnPlay:
						if(_importDataProxy.armature)
						{
							if(!btnPlay.selected)
							{
								_importDataProxy.armature.animation.stop();
							}
							else
							{
								if(_movementUpdated)
								{
									_importDataProxy.armature.animation.gotoAndPlay(_importDataProxy.animationDataProxy.movementName);
								}
								else
								{
									_importDataProxy.armature.animation.play();
								}
							}
							updatePlayAndPauseBtn();
							_movementUpdated = false;
						}
						break;
					case checkLoop:
						_importDataProxy.animationDataProxy.loop = checkLoop.selected;
						break;
					case sliderScale:
						numScale.value = sliderScale.value;
					case numScale:
						_importDataProxy.animationDataProxy.boneScale = sliderScale.value = isNaN(numScale.value)?0:numScale.value;
						break;
					case sliderDelay:
						numDelay.value = sliderDelay.value;
					case numDelay:
						_importDataProxy.animationDataProxy.boneDelay = sliderDelay.value = isNaN(numDelay.value)?0:numDelay.value;
						break;
				}
			}
			
			private function updatePlayAndPauseBtn():void
			{
				if(_importDataProxy.armature)
				{
					btnPlay.enabled = true;
					if(_importDataProxy.armature.animation.isPause)
					{
						btnPlay.label = resourceManager.getString('resources','play');
						btnPlay.selected = false;
					}
					else if(_importDataProxy.armature.animation.isComplete)
					{
						btnPlay.label = resourceManager.getString('resources','play');
						btnPlay.selected = false;
					}
					else
					{
						btnPlay.label = resourceManager.getString('resources','stop');
						btnPlay.selected = true;
					}
				}
				else
				{
					btnPlay.selected = false;
					btnPlay.enabled = false;
					btnPlay.label = resourceManager.getString('resources','play');
				}
			}
		]]>
	</fx:Script>
	<s:Rect width="100%" height="100%">
		<s:stroke>
			<s:SolidColorStroke color="0x000000" weight="1"/>
		</s:stroke>
	</s:Rect>
	<s:VGroup gap="2" horizontalAlign="right">
		<s:Button width="100%" height="24" cornerRadius="0"
				  label="{resourceManager.getString('resources','behaviorPanelTitle') + _movementName}"
				  />
		<s:HGroup paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10">
			<s:VGroup minWidth="100" gap="6" horizontalAlign="right">
				<s:Label height="24" textAlign="right" verticalAlign="middle"
						 text="{resourceManager.getString('resources','totalFrames')}"
						 />
				
				<s:Label height="24" textAlign="right" verticalAlign="middle"
						 text="{resourceManager.getString('resources','switchTweenFrames')}"
						 />
				
				<s:Label height="24" textAlign="right" verticalAlign="middle"
						 text="{resourceManager.getString('resources','keyFrameEase')}"
						 />
				
				<s:ToggleButton id="btnPlay" width="70" height="24"
								/>
			</s:VGroup>
			
			<s:Group>
				<s:HSlider id="sliderDurationTween" y="7" width="100"
						   minimum="0" maximum="10" snapInterval="0.01"
						   />
				<s:HSlider id="sliderDurationTo" y="37" width="100" 
						   minimum="0" maximum="10" snapInterval="0.01"
						   />
				<s:HSlider id="sliderTweenEasing" y="67" width="100"
						   minimum="-1.1" maximum="2" snapInterval="0.05"
						   />
				<s:CheckBox id="checkLoop" x="0" y="90" width="100" height="24"
							label="{resourceManager.getString('resources','loop')}"/>
				
				<s:NumericStepper id="numDurationTween" x="110" y="0" width="60" height="24" cornerRadius="0" textAlign="right"
								  maximum="3000" minimum="0" snapInterval="0.01"
								  />
				
				<s:NumericStepper id="numDurationTo" x="110" y="30" width="60" height="24" cornerRadius="0" textAlign="right"
								  maximum="3000" minimum="0" snapInterval="0.01"
								  />
			</s:Group>
		</s:HGroup>
		<s:Button width="100%" height="24" cornerRadius="0"
				  label="{resourceManager.getString('resources','bonePanelTitle') + _movementBoneName}"
				  />
		<s:HGroup paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10">
			<s:VGroup minWidth="100" gap="6" horizontalAlign="right">
				<s:Label height="24" textAlign="right" verticalAlign="middle"
						 text="{resourceManager.getString('resources','totalFramesScale')}"
						 />
				<s:Label height="24" textAlign="right" verticalAlign="middle"
						 text="{resourceManager.getString('resources','playDelay')}"
						 />
			</s:VGroup>
			<s:Group>
				<s:HSlider id="sliderScale" y="7" width="100"
						   minimum="0" maximum="200" snapInterval="5"
						   />
				<s:HSlider id="sliderDelay" y="37" width="100"
						   minimum="-100" maximum="100" snapInterval="5"
						   />
				<s:NumericStepper id="numScale" x="110" y="0" width="60" height="24" cornerRadius="0" textAlign="right"
								  maximum="1000" minimum="0" snapInterval="1"
								  />
				<s:NumericStepper id="numDelay" x="110" y="30" width="60" height="24" cornerRadius="0" textAlign="right"
								  maximum="100" minimum="-100" snapInterval="1"
								  />
			</s:Group>
		</s:HGroup>
	</s:VGroup>
</s:Group>