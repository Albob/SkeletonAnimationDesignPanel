<?xml version="1.0" encoding="utf-8"?>
<s:HGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:components="view.components.*"
		  xmlns:view="view.*"
		  minHeight="100" gap="2"
		  creationComplete="addedToStageHandler()">
	<fx:Script>
		<![CDATA[
			import control.CopyArmatureCommand;
			
			import dragonBones.utils.ConstValues;
			import dragonBones.utils.dragonBones_internal;
			
			import message.Message;
			import message.MessageDispatcher;
			
			import model.ImportDataProxy;
			import model.SettingDataProxy;
			
			import mx.events.ColorPickerEvent;
			import mx.events.DragEvent;
			import mx.events.ListEvent;
			
			import spark.events.GridEvent;
			import spark.events.GridSelectionEvent;
			
			use namespace dragonBones_internal;
			
			private static const AT_NAME:String = ConstValues.AT + ConstValues.A_NAME;
			
			private var _importDataProxy:ImportDataProxy = ImportDataProxy.getInstance();
			
			private function addedToStageHandler():void
			{
				armatureList.dataProvider = _importDataProxy.armaturesMC;
				movementList.dataProvider = _importDataProxy.animationDataProxy.movementsMC;
				displayList.dataProvider = _importDataProxy.armatureDataProxy.displaysMC;
				
				armatureList.doubleClickEnabled = true;
				armatureList.addEventListener(GridSelectionEvent.SELECTION_CHANGE, armatureHandler);
				armatureList.addEventListener(GridEvent.GRID_DOUBLE_CLICK, armatureHandler);
				movementList.addEventListener(GridSelectionEvent.SELECTION_CHANGE, movementHandler);
				
				boneTree.addEventListener(ListEvent.CHANGE, boneHandler);
				boneTree.addEventListener(DragEvent.DRAG_COMPLETE, boneHandler);
				
				MessageDispatcher.addEventListener(MessageDispatcher.CHANGE_ARMATURE_DATA, commandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.CHANGE_MOVEMENT_DATA, commandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.CHANGE_BONE_DATA, commandHandler);
				
				MessageDispatcher.addEventListener(MessageDispatcher.UPDATE_BONE_PARENT, commandHandler);
			}
			
			private function commandHandler(e:Message):void
			{
				switch(e.type)
				{
					case MessageDispatcher.CHANGE_ARMATURE_DATA:
						armatureList.selectedItem = getListItemByName(armatureList, e.parameters[0]);
					case MessageDispatcher.UPDATE_BONE_PARENT:
						boneTree.dataProvider = _importDataProxy.armatureDataProxy.bonesMC;
						boneTree.validateNow();
						for each(var _item:Object in boneTree.dataProvider)
						{
							boneTree.expandChildrenOf(_item, true);
						}
						if(e.type == MessageDispatcher.UPDATE_BONE_PARENT)
						{
							boneTree.selectItemByName(e.parameters[0]);
						}
						break;
					case MessageDispatcher.CHANGE_MOVEMENT_DATA:
						movementList.selectedItem = getListItemByName(movementList, e.parameters[0]);
						break;
					case MessageDispatcher.CHANGE_BONE_DATA:
						boneTree.selectItemByName(e.parameters[0]);
						break;
				}
			}
			
			private function armatureHandler(e:Event):void
			{
				switch(e.type)
				{
					case GridSelectionEvent.SELECTION_CHANGE:
						var armatureXML:XML = armatureList.selectedItem as XML;
						var armatureName:String = armatureXML?armatureXML.attribute(ConstValues.A_NAME):"";
						_importDataProxy.armatureDataProxy.setData(_importDataProxy.getArmatureXMLByName(armatureName));
						break;
					case GridEvent.GRID_DOUBLE_CLICK:
						var sourceIndex:int = armatureList.selectedIndex > 0?armatureList.selectedIndex - 1:1;
						armatureXML = armatureList.selectedItem as XML;
						if(armatureXML)
						{
							
							var sourceArmatureXML:XML = armatureList.dataProvider.getItemAt(sourceIndex) as XML;
							var sourceArmatureName:String = sourceArmatureXML.attribute(ConstValues.A_NAME);
							var sourceAnimationXML:XML = _importDataProxy.getAnimationXMLByName(sourceArmatureName);
							if(sourceAnimationXML)
							{
								CopyArmatureCommand.instance.copyArmatureFrom(
									armatureXML, 
									sourceArmatureXML, 
									sourceAnimationXML, 
									_importDataProxy.skeletonData
								);
							}
						}
						break;
				}
			}
			
			private function movementHandler(e:Event):void
			{
				var movementXML:XML = movementList.selectedItem as XML;
				var movementName:String = movementXML?movementXML.attribute(ConstValues.A_NAME):"";
				_importDataProxy.animationDataProxy.changeMovement(movementName);
			}
			
			private function boneHandler(e:Event):void
			{
				switch(e.type)
				{
					case ListEvent.CHANGE:
						var boneXML:XML = boneTree.selectedItem as XML;
						var boneName:String = boneXML?boneXML.attribute(ConstValues.A_NAME):"";
						_importDataProxy.armatureDataProxy.changeBone(boneName);
						_importDataProxy.animationDataProxy.changeMovementBone(boneName);
						break;
					case DragEvent.DRAG_COMPLETE:
						if(boneTree.lastMoveNode)
						{
							boneName = boneTree.lastMoveNode.attribute(ConstValues.A_NAME);
							var parentXML:XML = boneTree.lastMoveNode.parent();
							var parentName:String = parentXML.attribute(ConstValues.A_NAME);
							if(parentXML.name() != boneTree.lastMoveNode.name())
							{
								parentName = null;
							}
							
							_importDataProxy.armatureDataProxy.updateBoneParent(boneName, parentName);
						}
						break;
				}
			}
			
			private function getListItemByName(list:DataGrid, itemName:String):XML
			{
				for each(var eachItem:XML in list.dataProvider)
				{
					if(eachItem.attribute(ConstValues.A_NAME) == itemName)
					{
						return eachItem;
					}
				}
				return null;
			}
		]]>
	</fx:Script>
		<s:DataGrid id="armatureList" maxWidth="200" width="100%" height="100%">
			<s:columns>
				<s:ArrayList>
					<s:GridColumn dataField="{AT_NAME}" headerText="{resourceManager.getString('resources','skeletonList')}"/>
				</s:ArrayList>
			</s:columns>
		</s:DataGrid>
		<s:DataGrid id="movementList" maxWidth="200" width="100%" height="100%" sortableColumns="false">
			<s:columns>
				<s:ArrayList>
					<s:GridColumn dataField="{AT_NAME}" headerText="{resourceManager.getString('resources','behaviorList')}"/>
				</s:ArrayList>
			</s:columns>
		</s:DataGrid>
		<s:Group width="100%" height="100%">
			<s:HGroup width="100%" height="100%" gap="0">
				<s:Button width="100%" height="24" label="{resourceManager.getString('resources','boneTree')}"
					 	 cornerRadius="0" fontWeight="bold"/>
				<components:ColorPickerNoColor width="24" height="24"
											   label="{resourceManager.getString('resources','boneHighlight')}"
											   selectedColor="@{SettingDataProxy.getInstance().boneHighlightColor}"/>
			</s:HGroup>
			<components:DragTree id="boneTree" y="23" width="100%" height="100%" dragEnabled="true"
							dropEnabled="true" labelField="{AT_NAME}" textRollOverColor="#CCCCCC"
							textSelectedColor="#CCCCCC"/>
		</s:Group>
		<s:DataGrid id="displayList" maxWidth="350" width="100%" height="100%" sortableColumns="false">
			<s:columns>
				<s:ArrayList>
					<s:GridColumn dataField="{AT_NAME}" headerText="{resourceManager.getString('resources','textureList')}"/>
				</s:ArrayList>
			</s:columns>
		</s:DataGrid>
</s:HGroup>