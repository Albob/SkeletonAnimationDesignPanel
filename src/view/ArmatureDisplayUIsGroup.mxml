<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 creationComplete="addedToStageHandler(event)"
		 >
	<fx:Script>
		<![CDATA[
			import flash.filters.GlowFilter;
			import flash.ui.Mouse;
			import flash.ui.MouseCursor;
			
			import dragonBones.Armature;
			import dragonBones.Bone;
			import dragonBones.objects.BoneData;
			import dragonBones.utils.dragonBones_internal;
			
			import message.Message;
			import message.MessageDispatcher;
			
			import model.ImportDataProxy;
			import model.ShareObjectDataProxy;
			
			import utils.getPointTarget;
			
			use namespace dragonBones_internal;
			
			private var importDataProxy:ImportDataProxy = ImportDataProxy.getInstance();
			
			private var armatureContainer:Sprite;
			private var bgShape:Shape;
			private var lineX:Shape;
			private var lineY:Shape;
			private var boneDisplaySelected:Object;
			private var boneDisplayRollOver:Object;
			private var boneHighlightFilter:GlowFilter;
			private var boneRolloverFilter:GlowFilter;
			
			private var isDragedArmature:Boolean;
			private var pointDragInBone:Point = new Point();
			private var pointDragGlobal:Point = new Point();
			private var pointScrollBarDrag:Point = new Point();
			
			private var pointHelp:Point = new Point();
			
			private var armatreArea:Rectangle;
			
			private var link:LinkClip;
			
			private const MIN_SCALE:Number = 0.2;
			private const MAX_SCALE:Number = 10;
			public var __viewScale:Number = 0;
			public function get viewScale():Number{
				return __viewScale;
			}
			public function set viewScale(_viewScale:Number):void{
				if(_viewScale < MIN_SCALE){
					_viewScale = MIN_SCALE
				}else if(_viewScale > MAX_SCALE){
					_viewScale = MAX_SCALE;
				}
				__viewScale = _viewScale;
				if(armatureDisplay){
					armatureDisplay.scaleX = armatureDisplay.scaleY = __viewScale;
				}
				sliderScale.value = __viewScale;
			}
			
			private function get armatureDisplay():DisplayObjectContainer{
				return (importDataProxy.armature?importDataProxy.armature.display:null) as DisplayObjectContainer;
			}
			
			private function addedToStageHandler(event:Event):void{
				armatureContainer = new Sprite();
				
				link = new LinkClip();
				link.mouseChildren = false;
				link.mouseEnabled = false;
				link.visible = false;
				
				bgShape = new Shape();
				bgShape.graphics.beginFill(0xFF00FF, 0);
				bgShape.graphics.drawRect(0,0,10,10);
				
				lineX = new Shape();
				lineX.cacheAsBitmap = true;
				lineX.x = -1;
				lineY = new Shape();
				lineY.cacheAsBitmap = true;
				lineY.y = -1;
				lineX.graphics.lineStyle(0, 0x999999,1,true);
				lineX.graphics.lineTo(0,2048);
				lineY.graphics.lineStyle(0, 0x999999,1,true);
				lineY.graphics.lineTo(2048,0);
				
				armatureContainer.buttonMode = true;
				armatureContainer.doubleClickEnabled = true;
				armatureContainer.addChild(bgShape);
				armatureContainer.addEventListener(Event.ENTER_FRAME, onEnterFrameHandler);
				
				armatureContainer.addEventListener(MouseEvent.ROLL_OVER, containerMouseHandler);
				armatureContainer.addEventListener(MouseEvent.ROLL_OUT, containerMouseHandler);
				armatureContainer.addEventListener(MouseEvent.MOUSE_MOVE, containerMouseHandler);
				armatureContainer.addEventListener(MouseEvent.MOUSE_DOWN, containerMouseHandler);
				armatureContainer.addEventListener(MouseEvent.MOUSE_WHEEL, containerMouseHandler);
				armatureContainer.addEventListener(MouseEvent.DOUBLE_CLICK, containerMouseHandler);
				
				viewContainer.addChild(lineX);
				viewContainer.addChild(lineY);
				viewContainer.addChild(armatureContainer);
				
				btnZoomIn.addEventListener(MouseEvent.CLICK, scaleHandler);
				btnZoomOut.addEventListener(MouseEvent.CLICK, scaleHandler);
				sliderScale.addEventListener(Event.CHANGE, scaleHandler);
				
				scrollerViewer.horizontalScrollBar.addEventListener(MouseEvent.MOUSE_DOWN, scrollBarHandler);
				scrollerViewer.verticalScrollBar.addEventListener(MouseEvent.MOUSE_DOWN, scrollBarHandler);
				
				MessageDispatcher.addEventListener(MessageDispatcher.CHANGE_IMPORT_DATA, commandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.CHANGE_ARMATURE_DATA, commandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.CHANGE_MOVEMENT_DATA, commandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.CHANGE_BONE_DATA, commandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.UPDATE_MOVEMENT_DATA, commandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.UPDATE_MOVEMENT_BONE_DATA, commandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.UPDATE_BONE_PARENT, commandHandler);
				
				MessageDispatcher.addEventListener(MessageDispatcher.VIEW_BONE_HIGHLIGHT_CHANGE, commandHandler);
				
				MessageDispatcher.addEventListener(MessageDispatcher.MOVEMENT_CHANGE, commandHandler);
			}
			
			private function commandHandler(_e:Message):void{
				var _movementName:String;
				switch(_e.type){
					case MessageDispatcher.CHANGE_IMPORT_DATA:
						if(!boneHighlightFilter){
							boneHighlightFilter = new GlowFilter(
								ShareObjectDataProxy.getInstance().getData("boneHighlightColor"),
									0.5,8,8,4);
						}
						if(!boneRolloverFilter){
							boneRolloverFilter = new GlowFilter(
								ShareObjectDataProxy.getInstance().getData("boneHighlightColor"),
									0.5,2,2,32);
						}
						break;
					case MessageDispatcher.CHANGE_ARMATURE_DATA:
						isDragedArmature = false;
						armatreArea = null;
						//armatureContainer.removeChildren();
						var _length:uint = armatureContainer.numChildren;
						for(var _i:int = _length - 1;_i >= 0;_i --){
							armatureContainer.removeChildAt(_i);
						}
						
						if(armatureDisplay){
							viewScale = 1;
							armatureContainer.addChild(bgShape);
							armatureContainer.addChild(armatureDisplay);
							for(_i = armatureDisplay.numChildren - 1; _i >= 0;_i --){
								var _child:Sprite = armatureDisplay.getChildAt(_i) as Sprite;
								if(_child){
									_child.mouseChildren = false;
								}
							}
						}
						break;
					case MessageDispatcher.CHANGE_BONE_DATA:
						highlightBoneDisplay();
						break;
					case MessageDispatcher.CHANGE_MOVEMENT_DATA:
						changeRenderMovement(_e.parameters[0], false, _e.parameters[1]);
						break;
					case MessageDispatcher.UPDATE_MOVEMENT_DATA:
					case MessageDispatcher.UPDATE_MOVEMENT_BONE_DATA:
						changeRenderMovement(_e.parameters[0], true);
						break;
					case MessageDispatcher.UPDATE_BONE_PARENT:
						updateRenderBoneParent(_e.parameters[0]);
						break;
					case MessageDispatcher.VIEW_BONE_HIGHLIGHT_CHANGE:
						boneRolloverFilter.color = boneHighlightFilter.color = _e.parameters[0];
						highlightBoneDisplay();
						break;
					case MessageDispatcher.MOVEMENT_CHANGE:
						importDataProxy.animationDataProxy.changeMovement(_e.parameters[0], true);
						break;
				}
			}
			
			private function onEnterFrameHandler(_e:Event):void{
				importDataProxy.render();
				var _display:Object = armatureDisplay;
				if(_display){
					
					var _rect:Rectangle = _display.getRect(_display);
					
					if(armatreArea){
						armatreArea.left = Math.min(armatreArea.left, _rect.left);
						armatreArea.top = Math.min(armatreArea.top, _rect.top);
						armatreArea.right = Math.max(armatreArea.right, _rect.right);
						armatreArea.bottom = Math.max(armatreArea.bottom, _rect.bottom);
					}else{
						armatreArea = _rect;
					}
					
					var _x:int = armatreArea.x * __viewScale;
					var _y:int = armatreArea.y * __viewScale;
					var _width:uint = armatreArea.width * __viewScale;
					var _height:uint = armatreArea.height * __viewScale;
					
					var _smallW:Boolean;
					var _smallH:Boolean;
					if(_width < width){
						_smallW = true;
						_display.x = (width - _width) * 0.5 - _x;
					}else{
						_width += 200;
						_display.x = 100 - _x;
					}
					if(_height < height){
						_smallH = true;
						_display.y = (height - _height) * 0.5 - _y;
					}else{
						_height += 120;
						_display.y = 60 - _y;
					}
					
					
					if(_smallW && _smallH){
						isDragedArmature = false;
					}
					
					lineX.x = _display.x;
					lineY.y = _display.y;
					
					bgShape.width = viewContainerGroup.width = Math.max(_width, width);
					bgShape.height = viewContainerGroup.height = Math.max(_height, height);
					
					if(isMouseDown){
						scrollerViewer.horizontalScrollBar.value = pointDragGlobal.x - stage.mouseX + pointScrollBarDrag.x;
						scrollerViewer.verticalScrollBar.value = pointDragGlobal.y - stage.mouseY + pointScrollBarDrag.y;
					}else if(!isDragedArmature){
						scrollerViewer.horizontalScrollBar.value = (_width - width) * 0.5;
						scrollerViewer.verticalScrollBar.value = (_height - height) * 0.5;
					}
					
					updateOverAndOut();
					//updateBoneLink();
				}
			}
			
			private function scrollBarHandler(e:Event):void{
				isDragedArmature = true;
			}
			
			private var isMouseIn:Boolean;
			private var isMouseDown:Boolean;
			
			private function containerMouseHandler(_e:MouseEvent):void{
				var _display:DisplayObjectContainer = armatureDisplay;
				if(!_display){
					return;
				}
				var _mouseTarget:DisplayObject;
				switch(_e.type){
					case MouseEvent.ROLL_OVER:
						isMouseIn = true;
						break;
					case MouseEvent.ROLL_OUT:
						isMouseIn = false;
						break;
					case MouseEvent.MOUSE_MOVE:
						/*
						armatureContainer.addChild(link);
						link.visible = true;
						updateBoneLink();*/
						break;
					case MouseEvent.MOUSE_DOWN:
						isMouseDown = true;
						Mouse.cursor = MouseCursor.HAND;
						if(stage){
							stage.addEventListener(MouseEvent.MOUSE_UP, containerMouseHandler);
						}
						isDragedArmature = true;
						pointDragGlobal.x = stage.mouseX;
						pointDragGlobal.y = stage.mouseY;
						pointScrollBarDrag.x = scrollerViewer.horizontalScrollBar.value;
						pointScrollBarDrag.y = scrollerViewer.verticalScrollBar.value;
						break;
					case MouseEvent.MOUSE_UP:
						isMouseDown = false;
						Mouse.cursor = MouseCursor.AUTO;
						if(stage){
							stage.removeEventListener(MouseEvent.MOUSE_UP, containerMouseHandler);
						}
						
						if(boneDisplayRollOver){
							selectedBoneByDisplay(boneDisplayRollOver);
							//pointStart.x = boneDisplaySelected.mouseX;
							//pointStart.y = boneDisplaySelected.mouseY;
						}
						/*
						link.visible = false;
						if(boneDisplaySelected && boneDisplayRollOver && _e.target == boneDisplayRollOver){
							boneAddToParent();
						}*/
						break;
					case MouseEvent.MOUSE_WHEEL:
						_e.delta > 0?(viewScale += 0.2):(viewScale -= 0.2);
						break;
					case MouseEvent.DOUBLE_CLICK:
						isDragedArmature = false;
						viewScale = 1;
						break;
				}
			}
			
			private function scaleHandler(_e:Event):void{
				switch(_e.target){
					case btnZoomIn:
						viewScale += 0.5;
						break
					case btnZoomOut:
						viewScale -= 0.5;
						break
					case sliderScale:
						viewScale = sliderScale.value;
						break
				}
			}
			
			private function changeRenderMovement(_movementName:String, _autoPlay:Boolean = false, _isChangedByArmature:Boolean = false):void{
				if(_movementName && importDataProxy.armature && !_isChangedByArmature){
					if(_autoPlay?importDataProxy.armature.animation.isPlaying:true){
						importDataProxy.armature.animation.gotoAndPlay(_movementName);
					}
				}
			}
			
			private function updateRenderBoneParent(_boneName:String):void{
				if(importDataProxy.armature){
					importDataProxy.updateArmatureBoneOrigin(_boneName);
					changeRenderMovement(importDataProxy.animationDataProxy.movementName);
				}
			}
			
			private function updateOverAndOut():void{
				var _display:DisplayObjectContainer = armatureDisplay;
				if(isMouseIn){
					pointHelp.x = _display.mouseX;
					pointHelp.y = _display.mouseY;
					var _filtersBackup:Array = _display.filters;
					var _mouseTarget:DisplayObject = getPointTarget(_display, pointHelp, 2);
					_display.filters = _filtersBackup;
					if(_mouseTarget){
						if(_mouseTarget == boneDisplayRollOver){
							
						}else if(_mouseTarget != boneDisplaySelected){
							if(boneDisplayRollOver){
								boneDisplayRollOver.filters = null;
								boneDisplayRollOver = null;
							}
							//if(boneDisplaySelected && isMouseDown){
								//if(!checkBoneParent(boneDisplaySelected, _mouseTarget)){
									//return;
								//}
							//}
							boneDisplayRollOver = _mouseTarget;
							boneDisplayRollOver.filters = [boneRolloverFilter];
						}
					}else if(boneDisplayRollOver){
						boneDisplayRollOver.filters = null;
						boneDisplayRollOver = null;
					}
				}else if(boneDisplayRollOver){
					boneDisplayRollOver.filters = null;
					boneDisplayRollOver = null;
				}
				
				/*
				armatureContainer.addChild(link);
				link.visible = true;
				updateBoneLink();*/
			}
			
			private function updateBoneLink():void{
				if(link.visible){
					pointHelp = boneDisplaySelected.localToGlobal(pointDragInBone);
					pointHelp = armatureContainer.globalToLocal(pointHelp);
					link.x = pointHelp.x;
					link.y = pointHelp.y;
					var _dX:Number = armatureContainer.mouseX - link.x;
					var _dY:Number = armatureContainer.mouseY - link.y;
					var _radian:Number = Math.atan2(_dY, _dX);
					var _radius:Number = Math.sqrt(_dX * _dX + _dY * _dY);
					link.rotation = _radian * 180 / Math.PI;
					link.link.clip.width = _radius + 15;
					link.pt.x = _radius;
				}
			}
			
			private function checkBoneParent(_boneDisplay:Object, _boneParentDisplay:Object):Boolean{
				var _bone:Bone = importDataProxy.armature.getBoneByDisplay(_boneDisplay);
				if(_bone){
					var _boneName:String = _bone.name;
				}
				_bone = importDataProxy.armature.getBoneByDisplay(_boneParentDisplay);
				if(_bone){
					var _boneParentName:String = _bone.name;
				}
				
				return importDataProxy.armatureDataProxy.checkParent(_boneName, _boneParentName);
			}
			
			private function boneAddToParent():void{
				var _bone:Bone = importDataProxy.armature.getBoneByDisplay(boneDisplaySelected);
				if(_bone){
					var _boneName:String = _bone.name;
				}
				_bone = importDataProxy.armature.getBoneByDisplay(boneDisplayRollOver);
				if(_bone){
					var _boneParentName:String = _bone.name;
				}
				importDataProxy.armatureDataProxy.updateBoneParent(_boneName, _boneParentName);
			}
			
			private function selectedBoneByDisplay(_display:Object):void{
				var _bone:Bone = importDataProxy.armature.getBoneByDisplay(_display);
				if(_bone){
					importDataProxy.armatureDataProxy.changeBone(_bone.name);
					importDataProxy.animationDataProxy.changeMovementBone(_bone.name);
				}
			}
			private function highlightBoneDisplay(_color:uint = 0):void{
				
				if(boneDisplaySelected){
					boneDisplaySelected.filters = null;
					boneDisplaySelected = null;
				}
				
				if(armatureDisplay){
					var _bone:Bone = importDataProxy.armature.getBone(importDataProxy.armatureDataProxy.boneName);
					if(_bone){
						boneDisplaySelected = _bone.display || (_bone.childArmature?_bone.childArmature.display:null);
						if(boneDisplaySelected){
							if(boneDisplaySelected == boneDisplayRollOver){
								boneDisplayRollOver.filters = null;
								boneDisplayRollOver = null;
							}
							if(boneHighlightFilter.color){
								boneDisplaySelected.filters = [boneHighlightFilter];
							}
						}
					}
				}
			}
		]]>
	</fx:Script>
	<s:Rect width="100%" height="100%">
		<s:stroke>
			<s:SolidColorStroke color="0x000000" weight="1"/>
		</s:stroke>
	</s:Rect>
	<s:Scroller id="scrollerViewer" width="100%" height="100%">
		<s:Group>
			<s:Group id="viewContainerGroup">
				<mx:UIComponent id="viewContainer"/>
			</s:Group>
		</s:Group>
	</s:Scroller>
	<s:Button id="btnZoomOut" x="5" y="5" width="35" height="20" label="－"/>
	<s:Button id="btnZoomIn" x="150" y="5" width="35" height="20" label="＋"/>
	<s:HSlider id="sliderScale" x="45" y="10" width="100"
			    minimum="0.1" maximum="10" snapInterval="0.1"
			   />
</s:Group>
