<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:view="view.*"
			   addedToStage="addedToStageHandler()">
	<fx:Script>
		<![CDATA[
			import control.LoadFileDataCommand;
			
			import message.Message;
			import message.MessageDispatcher;
			
			import model.ImportDataProxy;
			import model.JSFLProxy;
			import model.ShareObjectDataProxy;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.managers.PopUpManager;
			
			import view.ExportWindow;
			import view.ImportWindow;
			//
			JSFLProxy.getInstance();
			
			public static var instance:SkeletonAnimationDesignPanel; 
			private static const JSFL_LANGUAGE_CODE:String = "languageCode";

			private var importDataProxy:ImportDataProxy = ImportDataProxy.getInstance();
			[Bindable]
			private var languageArrayCollection:ArrayCollection = new ArrayCollection([
				{label:"English", value:"en_US"}, 
				{label:"Chinese", value:"zh_CN"},
				{label:"French", value:"fr_FR"},
				{label:"Japanese", value:"ja_JP"}
			]);
			private var _selectedLanguageIndex:int = 0;
			
			[Bindable]
			private var aboutXML:XML =
				<root>
					<br/>
					<b>DragonBones Version 1.4</b>
					<br/>
					<br/>
					<a href="http://dragonbones.github.com/">http://dragonbones.github.com/</a>
					<br/>
					<br/>
					Contact us byã€€<a href="mailto:dragonbonesteam@gmail.com">dragonbonesteam@gmail.com</a>
					<br/>
					<br/>
					Copyright 2012 The DragonBones team and other contributors
				</root>
			
			private function addedToStageHandler():void
			{	
				var languageID:* = ShareObjectDataProxy.getInstance().getData("languageID");
				if(languageID != null){
					selectedLanguageIndex = int(languageID);
				}else{
					MessageDispatcher.addEventListener(JSFL_LANGUAGE_CODE, jsflProxyHandler);
					JSFLProxy.getInstance().runJSFLCode(JSFL_LANGUAGE_CODE, "fl.languageCode;");
				}
				
				instance = this;
				XML.prettyIndent = -1;
				removeEventListener(Event.ADDED_TO_STAGE, addedToStageHandler);
				if(loaderInfo){
					loaderInfo.uncaughtErrorEvents.addEventListener(UncaughtErrorEvent.UNCAUGHT_ERROR, onUncaughtErrorHandler);
					var _data:String = loaderInfo.parameters["data"];
					if(_data){
						LoadFileDataCommand.instance.load(_data);
					}
				}
				
				numFrameRate.value = stage.frameRate;
				numFrameRate.addEventListener(Event.CHANGE, valueChangeHandler);
				
				MessageDispatcher.addEventListener(MessageDispatcher.CHANGE_IMPORT_DATA, onCommandHandler);
			}
			
			private function onCommandHandler(_e:Message):void{
				switch(_e.type){
					case MessageDispatcher.CHANGE_IMPORT_DATA:
						numFrameRate.value = stage.frameRate = importDataProxy.frameRate;
						break;
				}
			}
			
			private function jsflProxyHandler(_e:Message):void
			{
				switch(_e.type)
				{
					case JSFL_LANGUAGE_CODE:
						
						var lanCode:String = String(_e.parameters[0]);
						MessageDispatcher.removeEventListener(JSFL_LANGUAGE_CODE, jsflProxyHandler);
						var len:int = languageArrayCollection.length;
						for(var i:int = 0; i < len; i++)
						{
							if(languageArrayCollection[i].value == lanCode)
							{
								selectedLanguageIndex = i;
								break;
							}
						}
						if(i == len)
						{
							selectedLanguageIndex = 0;
						}
						break;
					default:
						break;
				}
			}
			
			public function importData():void{
				var _window:ImportWindow = new ImportWindow();
				PopUpManager.addPopUp(_window, SkeletonAnimationDesignPanel.instance, true);
				PopUpManager.centerPopUp(_window);
			}
			
			public function exportData():void{
				var _window:ExportWindow = new ExportWindow();
				PopUpManager.addPopUp(_window, SkeletonAnimationDesignPanel.instance, true);
				PopUpManager.centerPopUp(_window);
			}
			
			private function navIndexChangeHandler(event:Event):void{
				switch(event.target.selectedChild){
					case navXML:
						if(importDataProxy.skeletonXML){
							txtXML.text = importDataProxy.skeletonXML;
						}
						break;
					case navTexture:
						if(importDataProxy.textureData){
							if(textureContainer.numChildren > 0){
								textureContainer.removeChildAt(0);
							}
							textureContainer.addChild(importDataProxy.textureData.bitmap);
							textureContainerGroup.width = importDataProxy.textureData.bitmap.width;
							textureContainerGroup.height = importDataProxy.textureData.bitmap.height;
						}
						break;
				}
			}
			
			private function valueChangeHandler(_e:Event):void{
				switch(_e.target){
					case numFrameRate:
						stage.frameRate = numFrameRate.value;
						break;
				}
			}
			
			private function onUncaughtErrorHandler(_e:UncaughtErrorEvent):void{
				Alert.show(String(_e.error));
			}
			
			[Bindable]
			private function get selectedLanguageIndex():int
			{
				return _selectedLanguageIndex;
			}
			private function set selectedLanguageIndex(value:int):void
			{
				_selectedLanguageIndex = value;
				ShareObjectDataProxy.getInstance().setData("languageID", _selectedLanguageIndex);
				resourceManager.localeChain = [languageArrayCollection[_selectedLanguageIndex].value];
			}
		]]>
	</fx:Script>
	<fx:Metadata>
		[ResourceBundle("resources")]
	</fx:Metadata>
	<mx:TabNavigator y="10" width="100%" height="100%" tabHeight="35" tabOffset="150" paddingTop="2" paddingBottom="2" paddingLeft="2" paddingRight="2"
					 change="navIndexChangeHandler(event)">
		<s:NavigatorContent width="100%" height="100%" label="{resourceManager.getString('resources','editor')}">
			<mx:VDividedBox width="100%" height="100%">
				<view:DatasUIsGroup width="100%" height="100%"/>
				<s:HGroup width="100%" height="250" gap="2">
					<view:ArmatureDisplayUIsGroup width="100%" height="100%"/>
					<view:ControlUIsGroup height="100%"/>
				</s:HGroup>
			</mx:VDividedBox>
		</s:NavigatorContent>
		<s:NavigatorContent id="navXML" width="100%" height="100%" label="{resourceManager.getString('resources','xml')}">
			<s:TextArea id="txtXML" left="0" right="0" top="0" bottom="0" editable="false"/>
		</s:NavigatorContent>
		<s:NavigatorContent id="navTexture" width="100%" height="100%" label="{resourceManager.getString('resources','textureAtlas')}">
			<s:Scroller width="100%" height="100%">
				<s:Group>
					<s:Group id="textureContainerGroup">
						<mx:UIComponent id="textureContainer"/>
					</s:Group>
				</s:Group>
			</s:Scroller>
		</s:NavigatorContent>
		<s:NavigatorContent width="100%" height="100%" label="{resourceManager.getString('resources','about')}">
			<mx:TextArea id="txtAbout" left="0" right="0" top="0" bottom="0" editable="false"
						 htmlText="{aboutXML}" textAlign="left"/>
		</s:NavigatorContent>
	</mx:TabNavigator>
	<s:Button x="10" y="10" width="60" height="24" cornerRadius="0"
			  label="{resourceManager.getString('resources','import')}"
			  click="{importData()}"
			  />
	<s:Button x="80" y="10" width="60" height="24" cornerRadius="0"
			  label="{resourceManager.getString('resources','export')}"
			  click="{exportData()}"
			  />
	<s:HGroup y="10" left="400" right="10" horizontalAlign="right" gap="10">
		<s:Label width="75" height="24" text="{resourceManager.getString('resources','frameRate')}"
				 textAlign="right" verticalAlign="middle"/>
		<s:NumericStepper id="numFrameRate" width="60" height="24" cornerRadius="0" textAlign="right"
						  maximum="120" minimum="1" snapInterval="1"/>
		
		<s:DropDownList width="120" height="24" cornerRadius="0" textAlign="right"
						dataProvider="{languageArrayCollection}"
						selectedIndex="@{selectedLanguageIndex}"/>
	</s:HGroup>
</s:Application>
