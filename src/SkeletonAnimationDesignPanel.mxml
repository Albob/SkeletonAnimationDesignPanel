<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:view="view.*"
			   addedToStage="addedToStageHandler()"
			   preloader="prevloadClasses.Prevloader" width="1024" height="768"
			   >
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<view:CopyWindow id="copyWindow"/>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import control.LoadFileDataCommand;
			import dragonBones.utils.ConstValues;
			
			import message.Message;
			import message.MessageDispatcher;
			
			import model.ImportDataProxy;
			import model.JSFLProxy;
			import model.SettingDataProxy;
			
			import mx.controls.Alert;
			import mx.managers.PopUpManager;
			
			import spark.events.IndexChangeEvent;
			
			import view.ExportWindow;
			import view.ImportWindow;
			//
			JSFLProxy.getInstance();

			private var _importDataProxy:ImportDataProxy = ImportDataProxy.getInstance();
			
			private var _alert:Alert;
			
			[Bindable]
			private var _aboutXML:XML;
			
			private function updateAbout():XML
			{
				var xml:XML = 
				<root>
					<br/>
					<b>DragonBones Version {ConstValues.VERSION}</b>
					<br/>
					<br/>
					<a href="http://dragonbones.github.com/">http://dragonbones.github.com/</a>
					<br/>
					<br/>
					<a href="mailto:dragonbonesteam@gmail.com">{resourceManager.getString('resources', 'contactUsBy', ['dragonbonesteam@gmail.com'])}</a>
					<br/>
					<br/>
					{resourceManager.getString('resources', 'copyright')}
				</root>
				return xml;
			}
			
			private function addedToStageHandler():void
			{	
				//XML.prettyIndent = -1;
				
				numFrameRate.value = stage.frameRate = 60;
				numFrameRate.addEventListener(Event.CHANGE, valueChangeHandler);
				
				MessageDispatcher.addEventListener(MessageDispatcher.SETTING_DATA_CHANGE, settingHandler);
				
				MessageDispatcher.addEventListener(MessageDispatcher.LOAD_FLADATA, commandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.LOAD_ARMATURE_DATA, commandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.LOAD_TEXTURE_DATA, commandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.LOAD_SWF_COMPLETE, commandHandler);
				
				MessageDispatcher.addEventListener(MessageDispatcher.LOAD_FILEDATA, commandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.LOAD_FILEDATA_ERROR, commandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.LOAD_FILEDATA_PROGRESS, commandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.LOAD_FILEDATA_COMPLETE, commandHandler);
				
				MessageDispatcher.addEventListener(MessageDispatcher.EXPORT, commandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.EXPORT_CANCEL, commandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.EXPORT_ERROR, commandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.EXPORT_COMPLETE, commandHandler);
				
				MessageDispatcher.addEventListener(MessageDispatcher.UPDATE_MOVEMENT_DATA, commandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.UPDATE_MOVEMENT_BONE_DATA, commandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.UPDATE_BONE_PARENT, commandHandler);
				
				MessageDispatcher.addEventListener(MessageDispatcher.CHANGE_MOVEMENT_DATA, commandHandler);
				
				MessageDispatcher.addEventListener(MessageDispatcher.MOVEMENT_CHANGE, commandHandler);
				
				if(loaderInfo)
				{
					loaderInfo.uncaughtErrorEvents.addEventListener(UncaughtErrorEvent.UNCAUGHT_ERROR, uncaughtErrorHandler);
					var data:String = loaderInfo.parameters["data"];
					if(data)
					{
						LoadFileDataCommand.instance.load(data);
					}
				}
			}
			
			private function settingHandler(e:Message):void
			{
				var settingID:String = e.parameters[0];
				var value:Object = e.parameters[1];
				switch(settingID)
				{
					case SettingDataProxy.LANGUAGE_ID:
						_aboutXML = updateAbout();
						break;
				}
			}
			
			private function commandHandler(e:Message):void
			{
				switch(e.type)
				{
					case MessageDispatcher.LOAD_FLADATA:
						if(e.parameters[0] > 0)
						{
							_alert = Alert.show(resourceManager.getString('resources','importFLAWaitting', [e.parameters[1]]));
						}
						else
						{
							_alert = Alert.show(resourceManager.getString('resources',"importNoElement", [e.parameters[1]]));
						}
						break;
					case MessageDispatcher.LOAD_ARMATURE_DATA:
						if(_alert)
						{
							_alert.title = resourceManager.getString('resources', 'importSkeletonProgress', [e.parameters[1], e.parameters[2]]);
						}
						break;
					case MessageDispatcher.LOAD_TEXTURE_DATA:
						if(_alert)
						{
							_alert.title = resourceManager.getString('resources', 'importTextureProgress', [e.parameters[1], e.parameters[2]]);
						}
						break;
					case MessageDispatcher.LOAD_FILEDATA:
						_alert = Alert.show(resourceManager.getString('resources', 'importFileWaitting'));
						break;
					case MessageDispatcher.LOAD_FILEDATA_ERROR:
						clearAlert();
						_alert = Alert.show(resourceManager.getString('resources', 'importFileError'));
						break;
					case MessageDispatcher.LOAD_FILEDATA_PROGRESS:
						if(_alert)
						{
							_alert.title = resourceManager.getString('resources', 'importFileProgress', [Math.round(e.parameters[0] * 100)]);
						}
						break;
					case MessageDispatcher.LOAD_SWF_COMPLETE:
						clearAlert();
						_importDataProxy.setData(e.parameters[0], e.parameters[1], e.parameters[2], e.parameters[3], false);
						break;
					case MessageDispatcher.LOAD_FILEDATA_COMPLETE:
						clearAlert();
						_importDataProxy.setData(e.parameters[0], e.parameters[1], e.parameters[2], e.parameters[3], true);
						break;
					case MessageDispatcher.EXPORT:
						_alert = Alert.show(resourceManager.getString('resources', 'exportWaitting'));
						break;
					case MessageDispatcher.EXPORT_CANCEL:
						clearAlert();
						break;
					case MessageDispatcher.EXPORT_ERROR:
						clearAlert();
						_alert = Alert.show(resourceManager.getString('resources', 'exportError'));
						break;
					case MessageDispatcher.EXPORT_COMPLETE:
						clearAlert();
						break;
					case MessageDispatcher.CHANGE_MOVEMENT_DATA:
						changeRenderMovement(e.parameters[0], false, e.parameters[1]);
						break;
					case MessageDispatcher.UPDATE_MOVEMENT_DATA:
					case MessageDispatcher.UPDATE_MOVEMENT_BONE_DATA:
						changeRenderMovement(e.parameters[0], true);
						break;
					case MessageDispatcher.UPDATE_BONE_PARENT:
						updateRenderBoneParent(e.parameters[0]);
						break;
					case MessageDispatcher.MOVEMENT_CHANGE:
						_importDataProxy.animationDataProxy.changeMovement(e.parameters[0], true);
						break;
				}
			}
			
			private function changeRenderMovement(movementName:String, autoPlay:Boolean = false, isChangedByArmature:Boolean = false):void
			{
				if(movementName && _importDataProxy.armature && !isChangedByArmature)
				{
					if(autoPlay?_importDataProxy.armature.animation.isPlaying:true)
					{
						_importDataProxy.armature.animation.gotoAndPlay(movementName);
					}
				}
			}
			
			private function updateRenderBoneParent(boneName:String):void
			{
				if(_importDataProxy.armature)
				{
					_importDataProxy.updateArmatureBoneOrigin(boneName);
					changeRenderMovement(_importDataProxy.animationDataProxy.movementName);
				}
			}
			
			private function importData():void
			{
				var window:ImportWindow = new ImportWindow();
				PopUpManager.addPopUp(window, this, true);
				PopUpManager.centerPopUp(window);
			}
			
			private function exportData():void
			{
				var window:ExportWindow = new ExportWindow();
				PopUpManager.addPopUp(window, this, true);
				PopUpManager.centerPopUp(window);
			}
			
			private function popUpCopyWindow():void
			{
				PopUpManager.addPopUp(copyWindow, this, true);
				PopUpManager.centerPopUp(copyWindow);
			}
			
			private function navIndexChangeHandler(event:Event):void
			{
				switch(event.target.selectedChild)
				{
					case navXML:
						if(_importDataProxy.skeletonXML)
						{
							txtXML.text = _importDataProxy.skeletonXML;
						}
						break;
					case navTexture:
						/*if(_importDataProxy.textureData)
						{
							if(textureContainer.numChildren > 0)
							{
								textureContainer.removeChildAt(0);
							}
							//textureContainer.addChild(_importDataProxy.textureData.bitmap);
							//textureContainerGroup.width = _importDataProxy.textureData.bitmap.width;
							//textureContainerGroup.height = _importDataProxy.textureData.bitmap.height;
						}*/
						break;
				}
			}
			
			private function valueChangeHandler(e:Event):void
			{
				switch(e.target)
				{
					case numFrameRate:
						stage.frameRate = numFrameRate.value;
						break;
				}
			}
			
			private function uncaughtErrorHandler(e:UncaughtErrorEvent):void
			{
				Alert.show(e.error);
			}
			
			private function clearAlert():void
			{
				if(_alert)
				{
					PopUpManager.removePopUp(_alert);
					_alert = null;
				}
			}
		]]>
	</fx:Script>
	<fx:Metadata>
		[ResourceBundle("resources")]
	</fx:Metadata>
	<mx:TabNavigator y="10" width="100%" height="100%" tabHeight="35" tabOffset="230" paddingTop="2" paddingBottom="2" paddingLeft="2" paddingRight="2"
					 creationPolicy="all"
					 change="navIndexChangeHandler(event)">
		<s:NavigatorContent width="100%" height="100%" label="{resourceManager.getString('resources','editor')}">
			<mx:VDividedBox width="100%" height="100%">
				<view:DatasUIsGroup width="100%" height="100%"/>
				<s:HGroup width="100%" height="265" gap="2">
					<view:ArmatureDisplayUIsGroup width="100%" height="100%"/>
					<view:ControlUIsGroup height="100%"/>
				</s:HGroup>
			</mx:VDividedBox>
		</s:NavigatorContent>
		<s:NavigatorContent id="navXML" width="100%" height="100%" label="{resourceManager.getString('resources','xml')}">
			<s:TextArea id="txtXML" left="0" right="0" top="0" bottom="0" editable="false"/>
		</s:NavigatorContent>
		<s:NavigatorContent id="navTexture" width="100%" height="100%" label="{resourceManager.getString('resources','textureAtlas')}">
			<s:Scroller width="100%" height="100%">
				<s:Group>
					<s:Group id="textureContainerGroup">
						<mx:UIComponent id="textureContainer"/>
					</s:Group>
				</s:Group>
			</s:Scroller>
		</s:NavigatorContent>
		<s:NavigatorContent width="100%" height="100%" label="{resourceManager.getString('resources','about')}">
			<mx:TextArea id="txtAbout" left="0" right="0" top="0" bottom="0" editable="false"
						 htmlText="{_aboutXML}" textAlign="left"/>
		</s:NavigatorContent>
	</mx:TabNavigator>
	<s:Button x="5" y="10" width="68" height="24" cornerRadius="0"
			  label="{resourceManager.getString('resources','import')}"
			  click="{importData()}"
			  />
	<s:Button x="77" y="10" width="68" height="24" cornerRadius="0"
			  label="{resourceManager.getString('resources','export')}"
			  click="{exportData()}"
			  />
	<s:Button x="150" y="10" width="68" height="24" cornerRadius="0"
			  label="Copy"
			  click="{popUpCopyWindow()}"
			  enabled="{ImportDataProxy.getInstance().skeletonData}"
			  />
	<s:HGroup y="10" left="450" right="10" horizontalAlign="right" gap="10">
		<s:Label height="24" text="{resourceManager.getString('resources','frameRate')}"
				 textAlign="right" verticalAlign="middle"/>
		<s:NumericStepper id="numFrameRate" width="60" height="24" cornerRadius="0" textAlign="right"
						  maximum="120" minimum="1" snapInterval="1"/>
		<s:DropDownList width="120" height="24" cornerRadius="0" textAlign="right"
						dataProvider="{SettingDataProxy.getInstance().languageArrayCollection}"
						selectedIndex="@{SettingDataProxy.getInstance().languageID}"
						/>
	</s:HGroup>
</s:Application>
